// Code generated by protoc-gen-gogo.
// source: pf.proto
// DO NOT EDIT!

/*
	Package pf is a generated protocol buffer package.

	It is generated from these files:
		pf.proto

	It has these top-level messages:
		PFActionType
		CheckVersionSend
		CheckVersionRecv
		KeepSocketAuthSend
		KeepSocketAuthRecv
		MessageReceiptSend
		MessageReceiptRecv
		OrderStatus
		SyncLogoutTimeSend
		SyncLogoutTimeRecv
		GotoDungeonSend
		GotoDungeonRecv
		GameDataBaseSend
		GameDataBaseRecv
		BuyEnergySend
		BuyEnergyRecv
		GetPayTokenSend
		GetPayTokenRecv
		OrderApplySend
		OrderApplyRecv
*/
package pf

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type PFActionType_PFActionTypeDetail int32

const (
	PFActionType_SyncLogoutTime     PFActionType_PFActionTypeDetail = 1
	PFActionType_GotoDungeon        PFActionType_PFActionTypeDetail = 2
	PFActionType_MessageReceiptSend PFActionType_PFActionTypeDetail = 4
	PFActionType_MessageReceiptRecv PFActionType_PFActionTypeDetail = 5
	PFActionType_KeepSocketAuthSend PFActionType_PFActionTypeDetail = 6
	PFActionType_KeepSocketAuthRecv PFActionType_PFActionTypeDetail = 7
	PFActionType_CheckVersion       PFActionType_PFActionTypeDetail = 8
	PFActionType_GameDataBase       PFActionType_PFActionTypeDetail = 201
	PFActionType_BuyEnergy          PFActionType_PFActionTypeDetail = 202
	PFActionType_GetPayToken        PFActionType_PFActionTypeDetail = 1402
	PFActionType_OrderApply         PFActionType_PFActionTypeDetail = 1403
)

var PFActionType_PFActionTypeDetail_name = map[int32]string{
	1:    "SyncLogoutTime",
	2:    "GotoDungeon",
	4:    "MessageReceiptSend",
	5:    "MessageReceiptRecv",
	6:    "KeepSocketAuthSend",
	7:    "KeepSocketAuthRecv",
	8:    "CheckVersion",
	201:  "GameDataBase",
	202:  "BuyEnergy",
	1402: "GetPayToken",
	1403: "OrderApply",
}
var PFActionType_PFActionTypeDetail_value = map[string]int32{
	"SyncLogoutTime":     1,
	"GotoDungeon":        2,
	"MessageReceiptSend": 4,
	"MessageReceiptRecv": 5,
	"KeepSocketAuthSend": 6,
	"KeepSocketAuthRecv": 7,
	"CheckVersion":       8,
	"GameDataBase":       201,
	"BuyEnergy":          202,
	"GetPayToken":        1402,
	"OrderApply":         1403,
}

func (x PFActionType_PFActionTypeDetail) Enum() *PFActionType_PFActionTypeDetail {
	p := new(PFActionType_PFActionTypeDetail)
	*p = x
	return p
}
func (x PFActionType_PFActionTypeDetail) String() string {
	return proto.EnumName(PFActionType_PFActionTypeDetail_name, int32(x))
}
func (x *PFActionType_PFActionTypeDetail) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PFActionType_PFActionTypeDetail_value, data, "PFActionType_PFActionTypeDetail")
	if err != nil {
		return err
	}
	*x = PFActionType_PFActionTypeDetail(value)
	return nil
}

type PFActionType struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PFActionType) Reset()         { *m = PFActionType{} }
func (m *PFActionType) String() string { return proto.CompactTextString(m) }
func (*PFActionType) ProtoMessage()    {}

// ========================================== COMMON PROTOCAL ========================================== //
type CheckVersionSend struct {
	Channel          *int32 `protobuf:"varint,1,req,name=channel" json:"channel,omitempty"`
	Version          *int32 `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CheckVersionSend) Reset()         { *m = CheckVersionSend{} }
func (m *CheckVersionSend) String() string { return proto.CompactTextString(m) }
func (*CheckVersionSend) ProtoMessage()    {}

func (m *CheckVersionSend) GetChannel() int32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CheckVersionSend) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type CheckVersionRecv struct {
	VerEnabled       *int32 `protobuf:"varint,1,req,name=verEnabled" json:"verEnabled,omitempty"`
	AdsEnabled       *int32 `protobuf:"varint,2,req,name=adsEnabled" json:"adsEnabled,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CheckVersionRecv) Reset()         { *m = CheckVersionRecv{} }
func (m *CheckVersionRecv) String() string { return proto.CompactTextString(m) }
func (*CheckVersionRecv) ProtoMessage()    {}

func (m *CheckVersionRecv) GetVerEnabled() int32 {
	if m != nil && m.VerEnabled != nil {
		return *m.VerEnabled
	}
	return 0
}

func (m *CheckVersionRecv) GetAdsEnabled() int32 {
	if m != nil && m.AdsEnabled != nil {
		return *m.AdsEnabled
	}
	return 0
}

type KeepSocketAuthSend struct {
	Uuid             *string `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	AccountID        *string `protobuf:"bytes,2,req,name=accountID" json:"accountID,omitempty"`
	AccountName      *string `protobuf:"bytes,3,req,name=accountName" json:"accountName,omitempty"`
	ChannelID        *int32  `protobuf:"varint,4,req,name=channelID" json:"channelID,omitempty"`
	SessionID        *string `protobuf:"bytes,5,req,name=sessionID" json:"sessionID,omitempty"`
	OS               *int32  `protobuf:"varint,6,req" json:"OS,omitempty"`
	DeviceModel      *string `protobuf:"bytes,7,opt,name=deviceModel" json:"deviceModel,omitempty"`
	OSVersion        *int32  `protobuf:"varint,8,opt" json:"OSVersion,omitempty"`
	NextMessageId    *int32  `protobuf:"varint,9,opt,name=nextMessageId" json:"nextMessageId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeepSocketAuthSend) Reset()         { *m = KeepSocketAuthSend{} }
func (m *KeepSocketAuthSend) String() string { return proto.CompactTextString(m) }
func (*KeepSocketAuthSend) ProtoMessage()    {}

func (m *KeepSocketAuthSend) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *KeepSocketAuthSend) GetAccountID() string {
	if m != nil && m.AccountID != nil {
		return *m.AccountID
	}
	return ""
}

func (m *KeepSocketAuthSend) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *KeepSocketAuthSend) GetChannelID() int32 {
	if m != nil && m.ChannelID != nil {
		return *m.ChannelID
	}
	return 0
}

func (m *KeepSocketAuthSend) GetSessionID() string {
	if m != nil && m.SessionID != nil {
		return *m.SessionID
	}
	return ""
}

func (m *KeepSocketAuthSend) GetOS() int32 {
	if m != nil && m.OS != nil {
		return *m.OS
	}
	return 0
}

func (m *KeepSocketAuthSend) GetDeviceModel() string {
	if m != nil && m.DeviceModel != nil {
		return *m.DeviceModel
	}
	return ""
}

func (m *KeepSocketAuthSend) GetOSVersion() int32 {
	if m != nil && m.OSVersion != nil {
		return *m.OSVersion
	}
	return 0
}

func (m *KeepSocketAuthSend) GetNextMessageId() int32 {
	if m != nil && m.NextMessageId != nil {
		return *m.NextMessageId
	}
	return 0
}

type KeepSocketAuthRecv struct {
	NextMessageId    *int32 `protobuf:"varint,1,req,name=nextMessageId" json:"nextMessageId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *KeepSocketAuthRecv) Reset()         { *m = KeepSocketAuthRecv{} }
func (m *KeepSocketAuthRecv) String() string { return proto.CompactTextString(m) }
func (*KeepSocketAuthRecv) ProtoMessage()    {}

func (m *KeepSocketAuthRecv) GetNextMessageId() int32 {
	if m != nil && m.NextMessageId != nil {
		return *m.NextMessageId
	}
	return 0
}

type MessageReceiptSend struct {
	ReadMessageId    *int32 `protobuf:"varint,1,req,name=readMessageId" json:"readMessageId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MessageReceiptSend) Reset()         { *m = MessageReceiptSend{} }
func (m *MessageReceiptSend) String() string { return proto.CompactTextString(m) }
func (*MessageReceiptSend) ProtoMessage()    {}

func (m *MessageReceiptSend) GetReadMessageId() int32 {
	if m != nil && m.ReadMessageId != nil {
		return *m.ReadMessageId
	}
	return 0
}

type MessageReceiptRecv struct {
	ReadMessageId    *int32 `protobuf:"varint,1,req,name=readMessageId" json:"readMessageId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MessageReceiptRecv) Reset()         { *m = MessageReceiptRecv{} }
func (m *MessageReceiptRecv) String() string { return proto.CompactTextString(m) }
func (*MessageReceiptRecv) ProtoMessage()    {}

func (m *MessageReceiptRecv) GetReadMessageId() int32 {
	if m != nil && m.ReadMessageId != nil {
		return *m.ReadMessageId
	}
	return 0
}

// ========================================== 结构 ========================================== //
type OrderStatus struct {
	OrderID          *string `protobuf:"bytes,1,req,name=orderID" json:"orderID,omitempty"`
	Status           *int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	ErrorDesc        *string `protobuf:"bytes,3,opt,name=errorDesc" json:"errorDesc,omitempty"`
	AppStoreID       *string `protobuf:"bytes,4,req,name=appStoreID" json:"appStoreID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OrderStatus) Reset()         { *m = OrderStatus{} }
func (m *OrderStatus) String() string { return proto.CompactTextString(m) }
func (*OrderStatus) ProtoMessage()    {}

func (m *OrderStatus) GetOrderID() string {
	if m != nil && m.OrderID != nil {
		return *m.OrderID
	}
	return ""
}

func (m *OrderStatus) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *OrderStatus) GetErrorDesc() string {
	if m != nil && m.ErrorDesc != nil {
		return *m.ErrorDesc
	}
	return ""
}

func (m *OrderStatus) GetAppStoreID() string {
	if m != nil && m.AppStoreID != nil {
		return *m.AppStoreID
	}
	return ""
}

type SyncLogoutTimeSend struct {
	Status           *int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SyncLogoutTimeSend) Reset()         { *m = SyncLogoutTimeSend{} }
func (m *SyncLogoutTimeSend) String() string { return proto.CompactTextString(m) }
func (*SyncLogoutTimeSend) ProtoMessage()    {}

func (m *SyncLogoutTimeSend) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

type SyncLogoutTimeRecv struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SyncLogoutTimeRecv) Reset()         { *m = SyncLogoutTimeRecv{} }
func (m *SyncLogoutTimeRecv) String() string { return proto.CompactTextString(m) }
func (*SyncLogoutTimeRecv) ProtoMessage()    {}

type GotoDungeonSend struct {
	DungeonID        *int32 `protobuf:"varint,1,req,name=dungeonID" json:"dungeonID,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GotoDungeonSend) Reset()         { *m = GotoDungeonSend{} }
func (m *GotoDungeonSend) String() string { return proto.CompactTextString(m) }
func (*GotoDungeonSend) ProtoMessage()    {}

func (m *GotoDungeonSend) GetDungeonID() int32 {
	if m != nil && m.DungeonID != nil {
		return *m.DungeonID
	}
	return 0
}

type GotoDungeonRecv struct {
	Status           *int32 `protobuf:"varint,1,req,name=status" json:"status,omitempty"`
	Energy           *int32 `protobuf:"varint,2,req,name=energy" json:"energy,omitempty"`
	EnergyAddTM      *int32 `protobuf:"varint,3,req,name=energyAddTM" json:"energyAddTM,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GotoDungeonRecv) Reset()         { *m = GotoDungeonRecv{} }
func (m *GotoDungeonRecv) String() string { return proto.CompactTextString(m) }
func (*GotoDungeonRecv) ProtoMessage()    {}

func (m *GotoDungeonRecv) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *GotoDungeonRecv) GetEnergy() int32 {
	if m != nil && m.Energy != nil {
		return *m.Energy
	}
	return 0
}

func (m *GotoDungeonRecv) GetEnergyAddTM() int32 {
	if m != nil && m.EnergyAddTM != nil {
		return *m.EnergyAddTM
	}
	return 0
}

type GameDataBaseSend struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GameDataBaseSend) Reset()         { *m = GameDataBaseSend{} }
func (m *GameDataBaseSend) String() string { return proto.CompactTextString(m) }
func (*GameDataBaseSend) ProtoMessage()    {}

type GameDataBaseRecv struct {
	LastLogoutTM     *int32 `protobuf:"varint,1,req,name=lastLogoutTM" json:"lastLogoutTM,omitempty"`
	Energy           *int32 `protobuf:"varint,2,req,name=energy" json:"energy,omitempty"`
	EnergyAddTM      *int32 `protobuf:"varint,3,req,name=energyAddTM" json:"energyAddTM,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GameDataBaseRecv) Reset()         { *m = GameDataBaseRecv{} }
func (m *GameDataBaseRecv) String() string { return proto.CompactTextString(m) }
func (*GameDataBaseRecv) ProtoMessage()    {}

func (m *GameDataBaseRecv) GetLastLogoutTM() int32 {
	if m != nil && m.LastLogoutTM != nil {
		return *m.LastLogoutTM
	}
	return 0
}

func (m *GameDataBaseRecv) GetEnergy() int32 {
	if m != nil && m.Energy != nil {
		return *m.Energy
	}
	return 0
}

func (m *GameDataBaseRecv) GetEnergyAddTM() int32 {
	if m != nil && m.EnergyAddTM != nil {
		return *m.EnergyAddTM
	}
	return 0
}

type BuyEnergySend struct {
	AddEnergy        *int32 `protobuf:"varint,1,req,name=addEnergy" json:"addEnergy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BuyEnergySend) Reset()         { *m = BuyEnergySend{} }
func (m *BuyEnergySend) String() string { return proto.CompactTextString(m) }
func (*BuyEnergySend) ProtoMessage()    {}

func (m *BuyEnergySend) GetAddEnergy() int32 {
	if m != nil && m.AddEnergy != nil {
		return *m.AddEnergy
	}
	return 0
}

type BuyEnergyRecv struct {
	Energy           *int32 `protobuf:"varint,1,req,name=energy" json:"energy,omitempty"`
	EnergyAddTM      *int32 `protobuf:"varint,2,req,name=energyAddTM" json:"energyAddTM,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BuyEnergyRecv) Reset()         { *m = BuyEnergyRecv{} }
func (m *BuyEnergyRecv) String() string { return proto.CompactTextString(m) }
func (*BuyEnergyRecv) ProtoMessage()    {}

func (m *BuyEnergyRecv) GetEnergy() int32 {
	if m != nil && m.Energy != nil {
		return *m.Energy
	}
	return 0
}

func (m *BuyEnergyRecv) GetEnergyAddTM() int32 {
	if m != nil && m.EnergyAddTM != nil {
		return *m.EnergyAddTM
	}
	return 0
}

type GetPayTokenSend struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetPayTokenSend) Reset()         { *m = GetPayTokenSend{} }
func (m *GetPayTokenSend) String() string { return proto.CompactTextString(m) }
func (*GetPayTokenSend) ProtoMessage()    {}

type GetPayTokenRecv struct {
	Token            *string `protobuf:"bytes,1,req,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetPayTokenRecv) Reset()         { *m = GetPayTokenRecv{} }
func (m *GetPayTokenRecv) String() string { return proto.CompactTextString(m) }
func (*GetPayTokenRecv) ProtoMessage()    {}

func (m *GetPayTokenRecv) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type OrderApplySend struct {
	OrderList        []string `protobuf:"bytes,1,rep,name=orderList" json:"orderList,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *OrderApplySend) Reset()         { *m = OrderApplySend{} }
func (m *OrderApplySend) String() string { return proto.CompactTextString(m) }
func (*OrderApplySend) ProtoMessage()    {}

func (m *OrderApplySend) GetOrderList() []string {
	if m != nil {
		return m.OrderList
	}
	return nil
}

type OrderApplyRecv struct {
	OrderList        []*OrderStatus `protobuf:"bytes,1,rep,name=orderList" json:"orderList,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *OrderApplyRecv) Reset()         { *m = OrderApplyRecv{} }
func (m *OrderApplyRecv) String() string { return proto.CompactTextString(m) }
func (*OrderApplyRecv) ProtoMessage()    {}

func (m *OrderApplyRecv) GetOrderList() []*OrderStatus {
	if m != nil {
		return m.OrderList
	}
	return nil
}

func init() {
	proto.RegisterEnum("pf.PFActionType_PFActionTypeDetail", PFActionType_PFActionTypeDetail_name, PFActionType_PFActionTypeDetail_value)
}
func (m *PFActionType) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *CheckVersionSend) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *CheckVersionRecv) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerEnabled", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerEnabled = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdsEnabled", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdsEnabled = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *KeepSocketAuthSend) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Uuid = &s
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.AccountID = &s
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.AccountName = &s
			index = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChannelID = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.SessionID = &s
			index = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OS", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OS = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.DeviceModel = &s
			index = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSVersion", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OSVersion = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextMessageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextMessageId = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *KeepSocketAuthRecv) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextMessageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextMessageId = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *MessageReceiptSend) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadMessageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadMessageId = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *MessageReceiptRecv) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadMessageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadMessageId = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *OrderStatus) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.OrderID = &s
			index = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.ErrorDesc = &s
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppStoreID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.AppStoreID = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *SyncLogoutTimeSend) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *SyncLogoutTimeRecv) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *GotoDungeonSend) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DungeonID = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *GotoDungeonRecv) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Energy = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyAddTM", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnergyAddTM = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *GameDataBaseSend) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *GameDataBaseRecv) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogoutTM", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastLogoutTM = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Energy = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyAddTM", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnergyAddTM = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *BuyEnergySend) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddEnergy", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddEnergy = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *BuyEnergyRecv) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Energy = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyAddTM", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnergyAddTM = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *GetPayTokenSend) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		switch fieldNum {
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *GetPayTokenRecv) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Token = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *OrderApplySend) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderList = append(m.OrderList, string(data[index:postIndex]))
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *OrderApplyRecv) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderList = append(m.OrderList, &OrderStatus{})
			m.OrderList[len(m.OrderList)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *PFActionType) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckVersionSend) Size() (n int) {
	var l int
	_ = l
	if m.Channel != nil {
		n += 1 + sovPf(uint64(*m.Channel))
	}
	if m.Version != nil {
		n += 1 + sovPf(uint64(*m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckVersionRecv) Size() (n int) {
	var l int
	_ = l
	if m.VerEnabled != nil {
		n += 1 + sovPf(uint64(*m.VerEnabled))
	}
	if m.AdsEnabled != nil {
		n += 1 + sovPf(uint64(*m.AdsEnabled))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeepSocketAuthSend) Size() (n int) {
	var l int
	_ = l
	if m.Uuid != nil {
		l = len(*m.Uuid)
		n += 1 + l + sovPf(uint64(l))
	}
	if m.AccountID != nil {
		l = len(*m.AccountID)
		n += 1 + l + sovPf(uint64(l))
	}
	if m.AccountName != nil {
		l = len(*m.AccountName)
		n += 1 + l + sovPf(uint64(l))
	}
	if m.ChannelID != nil {
		n += 1 + sovPf(uint64(*m.ChannelID))
	}
	if m.SessionID != nil {
		l = len(*m.SessionID)
		n += 1 + l + sovPf(uint64(l))
	}
	if m.OS != nil {
		n += 1 + sovPf(uint64(*m.OS))
	}
	if m.DeviceModel != nil {
		l = len(*m.DeviceModel)
		n += 1 + l + sovPf(uint64(l))
	}
	if m.OSVersion != nil {
		n += 1 + sovPf(uint64(*m.OSVersion))
	}
	if m.NextMessageId != nil {
		n += 1 + sovPf(uint64(*m.NextMessageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeepSocketAuthRecv) Size() (n int) {
	var l int
	_ = l
	if m.NextMessageId != nil {
		n += 1 + sovPf(uint64(*m.NextMessageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageReceiptSend) Size() (n int) {
	var l int
	_ = l
	if m.ReadMessageId != nil {
		n += 1 + sovPf(uint64(*m.ReadMessageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageReceiptRecv) Size() (n int) {
	var l int
	_ = l
	if m.ReadMessageId != nil {
		n += 1 + sovPf(uint64(*m.ReadMessageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderStatus) Size() (n int) {
	var l int
	_ = l
	if m.OrderID != nil {
		l = len(*m.OrderID)
		n += 1 + l + sovPf(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovPf(uint64(*m.Status))
	}
	if m.ErrorDesc != nil {
		l = len(*m.ErrorDesc)
		n += 1 + l + sovPf(uint64(l))
	}
	if m.AppStoreID != nil {
		l = len(*m.AppStoreID)
		n += 1 + l + sovPf(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncLogoutTimeSend) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovPf(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncLogoutTimeRecv) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GotoDungeonSend) Size() (n int) {
	var l int
	_ = l
	if m.DungeonID != nil {
		n += 1 + sovPf(uint64(*m.DungeonID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GotoDungeonRecv) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovPf(uint64(*m.Status))
	}
	if m.Energy != nil {
		n += 1 + sovPf(uint64(*m.Energy))
	}
	if m.EnergyAddTM != nil {
		n += 1 + sovPf(uint64(*m.EnergyAddTM))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameDataBaseSend) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameDataBaseRecv) Size() (n int) {
	var l int
	_ = l
	if m.LastLogoutTM != nil {
		n += 1 + sovPf(uint64(*m.LastLogoutTM))
	}
	if m.Energy != nil {
		n += 1 + sovPf(uint64(*m.Energy))
	}
	if m.EnergyAddTM != nil {
		n += 1 + sovPf(uint64(*m.EnergyAddTM))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuyEnergySend) Size() (n int) {
	var l int
	_ = l
	if m.AddEnergy != nil {
		n += 1 + sovPf(uint64(*m.AddEnergy))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuyEnergyRecv) Size() (n int) {
	var l int
	_ = l
	if m.Energy != nil {
		n += 1 + sovPf(uint64(*m.Energy))
	}
	if m.EnergyAddTM != nil {
		n += 1 + sovPf(uint64(*m.EnergyAddTM))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPayTokenSend) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPayTokenRecv) Size() (n int) {
	var l int
	_ = l
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovPf(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderApplySend) Size() (n int) {
	var l int
	_ = l
	if len(m.OrderList) > 0 {
		for _, s := range m.OrderList {
			l = len(s)
			n += 1 + l + sovPf(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderApplyRecv) Size() (n int) {
	var l int
	_ = l
	if len(m.OrderList) > 0 {
		for _, e := range m.OrderList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPf(x uint64) (n int) {
	return sovPf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PFActionType) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PFActionType) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckVersionSend) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CheckVersionSend) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.Channel))
	}
	if m.Version != nil {
		data[i] = 0x10
		i++
		i = encodeVarintPf(data, i, uint64(*m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckVersionRecv) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CheckVersionRecv) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VerEnabled != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.VerEnabled))
	}
	if m.AdsEnabled != nil {
		data[i] = 0x10
		i++
		i = encodeVarintPf(data, i, uint64(*m.AdsEnabled))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KeepSocketAuthSend) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *KeepSocketAuthSend) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uuid != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPf(data, i, uint64(len(*m.Uuid)))
		i += copy(data[i:], *m.Uuid)
	}
	if m.AccountID != nil {
		data[i] = 0x12
		i++
		i = encodeVarintPf(data, i, uint64(len(*m.AccountID)))
		i += copy(data[i:], *m.AccountID)
	}
	if m.AccountName != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintPf(data, i, uint64(len(*m.AccountName)))
		i += copy(data[i:], *m.AccountName)
	}
	if m.ChannelID != nil {
		data[i] = 0x20
		i++
		i = encodeVarintPf(data, i, uint64(*m.ChannelID))
	}
	if m.SessionID != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintPf(data, i, uint64(len(*m.SessionID)))
		i += copy(data[i:], *m.SessionID)
	}
	if m.OS != nil {
		data[i] = 0x30
		i++
		i = encodeVarintPf(data, i, uint64(*m.OS))
	}
	if m.DeviceModel != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintPf(data, i, uint64(len(*m.DeviceModel)))
		i += copy(data[i:], *m.DeviceModel)
	}
	if m.OSVersion != nil {
		data[i] = 0x40
		i++
		i = encodeVarintPf(data, i, uint64(*m.OSVersion))
	}
	if m.NextMessageId != nil {
		data[i] = 0x48
		i++
		i = encodeVarintPf(data, i, uint64(*m.NextMessageId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KeepSocketAuthRecv) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *KeepSocketAuthRecv) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextMessageId != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.NextMessageId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageReceiptSend) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MessageReceiptSend) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReadMessageId != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.ReadMessageId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageReceiptRecv) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MessageReceiptRecv) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReadMessageId != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.ReadMessageId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OrderStatus) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPf(data, i, uint64(len(*m.OrderID)))
		i += copy(data[i:], *m.OrderID)
	}
	if m.Status != nil {
		data[i] = 0x10
		i++
		i = encodeVarintPf(data, i, uint64(*m.Status))
	}
	if m.ErrorDesc != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintPf(data, i, uint64(len(*m.ErrorDesc)))
		i += copy(data[i:], *m.ErrorDesc)
	}
	if m.AppStoreID != nil {
		data[i] = 0x22
		i++
		i = encodeVarintPf(data, i, uint64(len(*m.AppStoreID)))
		i += copy(data[i:], *m.AppStoreID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SyncLogoutTimeSend) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SyncLogoutTimeSend) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SyncLogoutTimeRecv) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SyncLogoutTimeRecv) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GotoDungeonSend) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GotoDungeonSend) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DungeonID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.DungeonID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GotoDungeonRecv) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GotoDungeonRecv) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.Status))
	}
	if m.Energy != nil {
		data[i] = 0x10
		i++
		i = encodeVarintPf(data, i, uint64(*m.Energy))
	}
	if m.EnergyAddTM != nil {
		data[i] = 0x18
		i++
		i = encodeVarintPf(data, i, uint64(*m.EnergyAddTM))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameDataBaseSend) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GameDataBaseSend) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameDataBaseRecv) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GameDataBaseRecv) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastLogoutTM != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.LastLogoutTM))
	}
	if m.Energy != nil {
		data[i] = 0x10
		i++
		i = encodeVarintPf(data, i, uint64(*m.Energy))
	}
	if m.EnergyAddTM != nil {
		data[i] = 0x18
		i++
		i = encodeVarintPf(data, i, uint64(*m.EnergyAddTM))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BuyEnergySend) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BuyEnergySend) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddEnergy != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.AddEnergy))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BuyEnergyRecv) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BuyEnergyRecv) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Energy != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPf(data, i, uint64(*m.Energy))
	}
	if m.EnergyAddTM != nil {
		data[i] = 0x10
		i++
		i = encodeVarintPf(data, i, uint64(*m.EnergyAddTM))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPayTokenSend) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetPayTokenSend) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPayTokenRecv) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetPayTokenRecv) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPf(data, i, uint64(len(*m.Token)))
		i += copy(data[i:], *m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderApplySend) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OrderApplySend) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderList) > 0 {
		for _, s := range m.OrderList {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderApplyRecv) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OrderApplyRecv) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderList) > 0 {
		for _, msg := range m.OrderList {
			data[i] = 0xa
			i++
			i = encodeVarintPf(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Pf(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pf(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPf(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
