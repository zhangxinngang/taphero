// Code generated by protoc-gen-gogo.
// source: pub.proto
// DO NOT EDIT!

/*
	Package pub is a generated protocol buffer package.

	It is generated from these files:
		pub.proto

	It has these top-level messages:
		MessagePair
		ABSMessage
*/
package pub

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type MessagePair struct {
	ActionType       *int32 `protobuf:"varint,1,req,name=action_type" json:"action_type,omitempty"`
	MessageBytes     []byte `protobuf:"bytes,2,req,name=message_bytes" json:"message_bytes,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MessagePair) Reset()         { *m = MessagePair{} }
func (m *MessagePair) String() string { return proto.CompactTextString(m) }
func (*MessagePair) ProtoMessage()    {}

func (m *MessagePair) GetActionType() int32 {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return 0
}

func (m *MessagePair) GetMessageBytes() []byte {
	if m != nil {
		return m.MessageBytes
	}
	return nil
}

type ABSMessage struct {
	// 抽象结构，包含消息类型和消息二进制流
	MsgList          []*MessagePair `protobuf:"bytes,1,rep,name=msgList" json:"msgList,omitempty"`
	Token            *string        `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Subversion       *int32         `protobuf:"varint,3,opt,name=subversion" json:"subversion,omitempty"`
	MessageId        *int32         `protobuf:"varint,4,opt,name=message_id" json:"message_id,omitempty"`
	Timestamp        *int32         `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ABSMessage) Reset()         { *m = ABSMessage{} }
func (m *ABSMessage) String() string { return proto.CompactTextString(m) }
func (*ABSMessage) ProtoMessage()    {}

func (m *ABSMessage) GetMsgList() []*MessagePair {
	if m != nil {
		return m.MsgList
	}
	return nil
}

func (m *ABSMessage) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *ABSMessage) GetSubversion() int32 {
	if m != nil && m.Subversion != nil {
		return *m.Subversion
	}
	return 0
}

func (m *ABSMessage) GetMessageId() int32 {
	if m != nil && m.MessageId != nil {
		return *m.MessageId
	}
	return 0
}

func (m *ABSMessage) GetTimestamp() int32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func init() {
}
func (m *MessagePair) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActionType = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageBytes = append([]byte{}, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *ABSMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgList = append(m.MsgList, &MessagePair{})
			m.MsgList[len(m.MsgList)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Token = &s
			index = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subversion", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subversion = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessageId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *MessagePair) Size() (n int) {
	var l int
	_ = l
	if m.ActionType != nil {
		n += 1 + sovPub(uint64(*m.ActionType))
	}
	if m.MessageBytes != nil {
		l = len(m.MessageBytes)
		n += 1 + l + sovPub(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ABSMessage) Size() (n int) {
	var l int
	_ = l
	if len(m.MsgList) > 0 {
		for _, e := range m.MsgList {
			l = e.Size()
			n += 1 + l + sovPub(uint64(l))
		}
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovPub(uint64(l))
	}
	if m.Subversion != nil {
		n += 1 + sovPub(uint64(*m.Subversion))
	}
	if m.MessageId != nil {
		n += 1 + sovPub(uint64(*m.MessageId))
	}
	if m.Timestamp != nil {
		n += 1 + sovPub(uint64(*m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPub(x uint64) (n int) {
	return sovPub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessagePair) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MessagePair) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActionType != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPub(data, i, uint64(*m.ActionType))
	}
	if m.MessageBytes != nil {
		data[i] = 0x12
		i++
		i = encodeVarintPub(data, i, uint64(len(m.MessageBytes)))
		i += copy(data[i:], m.MessageBytes)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ABSMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ABSMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MsgList) > 0 {
		for _, msg := range m.MsgList {
			data[i] = 0xa
			i++
			i = encodeVarintPub(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Token != nil {
		data[i] = 0x12
		i++
		i = encodeVarintPub(data, i, uint64(len(*m.Token)))
		i += copy(data[i:], *m.Token)
	}
	if m.Subversion != nil {
		data[i] = 0x18
		i++
		i = encodeVarintPub(data, i, uint64(*m.Subversion))
	}
	if m.MessageId != nil {
		data[i] = 0x20
		i++
		i = encodeVarintPub(data, i, uint64(*m.MessageId))
	}
	if m.Timestamp != nil {
		data[i] = 0x28
		i++
		i = encodeVarintPub(data, i, uint64(*m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Pub(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pub(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPub(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
